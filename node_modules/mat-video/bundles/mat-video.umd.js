(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material'), require('@angular/cdk/a11y'), require('@angular/cdk/bidi'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define('mat-video', ['exports', '@angular/core', '@angular/material', '@angular/cdk/a11y', '@angular/cdk/bidi', '@angular/common'], factory) :
	(factory((global['mat-video'] = {}),global.ng.core,global.ng.material,global.ng.cdk.a11y,global.ng.cdk.bidi,global.ng.common));
}(this, (function (exports,core,material,a11y,bidi,common) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0
THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.
See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */
var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}








function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

var EventService = /** @class */ (function () {
    function EventService() {
    }
    EventService.prototype.addEvents = function (renderer, events) {
        var _loop_1 = function (event) {
            event.dispose = renderer.listen(event.element, event.name, function (newEvent) { return event.callback(newEvent); });
        };
        try {
            for (var events_1 = __values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                var event = events_1_1.value;
                _loop_1(event);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var e_1, _a;
    };
    EventService.prototype.removeEvents = function (events) {
        try {
            for (var events_2 = __values(events), events_2_1 = events_2.next(); !events_2_1.done; events_2_1 = events_2.next()) {
                var event = events_2_1.value;
                if (event.dispose)
                    event.dispose();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (events_2_1 && !events_2_1.done && (_a = events_2.return)) _a.call(events_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var e_2, _a;
    };
    return EventService;
}());
EventService.decorators = [
    { type: core.Injectable },
];
EventService.ctorParameters = function () { return []; };
var MatVideoComponent = /** @class */ (function () {
    function MatVideoComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.src = null;
        this.title = null;
        this.autoplay = false;
        this.preload = true;
        this.loop = false;
        this.quality = true;
        this.fullscreen = true;
        this.download = false;
        this.color = 'primary';
        this.spinner = 'spin';
        this.poster = null;
        this.playing = false;
        this.isFullscreen = false;
        this.videoLoaded = false;
        this.isMouseMoving = false;
        this.isMouseMovingTimeout = 2000;
    }
    MatVideoComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.events = [
            { element: this.video.nativeElement, name: 'loadstart', callback: function (event) { return _this.videoLoaded = false; }, dispose: null },
            { element: this.video.nativeElement, name: 'loadedmetadata', callback: function (event) { return _this.evLoadedMetadata(event); }, dispose: null },
            { element: this.video.nativeElement, name: 'error', callback: function (event) { return console.error('Unhandled Video Error', event); }, dispose: null },
            { element: this.video.nativeElement, name: 'contextmenu', callback: function (event) { return event.preventDefault(); }, dispose: null },
            { element: this.player.nativeElement, name: 'mousemove', callback: function (event) { return _this.evMouseMove(event); }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    MatVideoComponent.prototype.ngOnDestroy = function () {
        this.evt.removeEvents(this.events);
    };
    MatVideoComponent.prototype.load = function () {
        if (this.video && this.video.nativeElement)
            this.video.nativeElement.load();
    };
    MatVideoComponent.prototype.getVideoTag = function () {
        return this.video && this.video.nativeElement ? (this.video.nativeElement) : null;
    };
    MatVideoComponent.prototype.evLoadedMetadata = function (event) {
        this.videoWidth = this.video.nativeElement.videoWidth;
        this.videoHeight = this.video.nativeElement.videoHeight;
        this.videoLoaded = true;
    };
    MatVideoComponent.prototype.evMouseMove = function (event) {
        var _this = this;
        this.isMouseMoving = true;
        clearTimeout(this.isMouseMovingTimer);
        this.isMouseMovingTimer = setTimeout(function () {
            _this.isMouseMoving = false;
        }, this.isMouseMovingTimeout);
    };
    MatVideoComponent.prototype.getOverlayClass = function (activeClass, inactiveClass) {
        return (!this.playing || this.isMouseMoving) ? activeClass : inactiveClass;
    };
    return MatVideoComponent;
}());
MatVideoComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-video',
                template: "<div #player class=\"videoplayer\" [ngClass]=\"getOverlayClass('show-mouse', 'hide-mouse')\">\n    <div class=\"header\" *ngIf=\"title\" [ngClass]=\"getOverlayClass('visible', 'hidden')\">\n        {{title}}\n    </div>\n\n    <video #video class=\"video\" [attr.src]=\"src ? src : null\" [attr.autoplay]=\"autoplay ? true : null\" [preload]=\"preload ? 'auto' : 'metadata'\"\n        [attr.poster]=\"poster ? poster : null\" [attr.loop]=\"loop ? loop : null\">\n        <ng-content select=\"source\"></ng-content>\n        <ng-content select=\"track\"></ng-content>\n        This browser does not support HTML5 video.\n    </video>\n\n    <div class=\"controls\" *ngIf=\"videoLoaded\" [ngClass]=\"getOverlayClass('visible', 'hidden')\">\n        <div class=\"progress\">\n            <mat-seek-progress-control [color]=\"color\" [video]=\"video\"></mat-seek-progress-control>\n        </div>\n\n        <div class=\"menu\">\n            <div class=\"left\">\n                <mat-play-button (playChanged)=\"playing = $event\" [video]=\"video\"></mat-play-button>\n\n                <mat-volume-control [color]=\"color\" [video]=\"video\"></mat-volume-control>\n\n                <mat-time-control [video]=\"video\"></mat-time-control>\n            </div>\n\n            <div class=\"right\">\n                <mat-quality-control *ngIf=\"quality\" [video]=\"video\"></mat-quality-control>\n\n                <mat-download-button *ngIf=\"download\" [title]=\"title\" [video]=\"video\"></mat-download-button>\n\n                <mat-fullscreen-button *ngIf=\"fullscreen\" (fullscreenChanged)=\"isFullscreen = $event\" [player]=\"player\"></mat-fullscreen-button>\n            </div>\n        </div>\n    </div>\n\n    <mat-video-spinner [spinner]=\"spinner\" [video]=\"video\"></mat-video-spinner>\n</div>",
                styles: [".videoplayer{font-family:Roboto,\"Helvetica Neue\",sans-serif;background-color:#000;position:relative;width:100%;height:100%}.header{color:#fff;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:absolute;left:0;top:14px;width:100%;z-index:1}.video{display:block;width:100%;height:100%;z-index:0}.controls{color:#fff;position:absolute;left:0;bottom:0;width:100%;z-index:1}.controls .progress{height:26px}.controls .menu{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;height:48px}.controls .menu .left{-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}.controls .menu .right{-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}.visible{visibility:visible;opacity:1;-webkit-transition:opacity .5s linear;transition:opacity .5s linear}.hidden{visibility:hidden;opacity:0;-webkit-transition:visibility 0s .5s,opacity .5s linear;transition:visibility 0s .5s,opacity .5s linear}.show-mouse{cursor:default}.hide-mouse{cursor:none}", "@font-face{font-family:'Material Icons';font-style:normal;font-weight:400;src:url(https://fonts.gstatic.com/s/materialicons/v36/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2) format('woff2')}::ng-deep.material-icons{font-family:'Material Icons';font-weight:400;font-style:normal;font-size:24px;line-height:1;letter-spacing:normal;text-transform:none;display:inline-block;white-space:nowrap;word-wrap:normal;direction:ltr;font-feature-settings:'liga';-webkit-font-feature-settings:'liga';-webkit-font-smoothing:antialiased}"]
            },] },
];
MatVideoComponent.ctorParameters = function () { return [
    { type: core.Renderer2 },
    { type: EventService }
]; };
MatVideoComponent.propDecorators = {
    player: [{ type: core.ViewChild, args: ['player',] }],
    video: [{ type: core.ViewChild, args: ['video',] }],
    src: [{ type: core.Input }],
    title: [{ type: core.Input }],
    autoplay: [{ type: core.Input }],
    preload: [{ type: core.Input }],
    loop: [{ type: core.Input }],
    quality: [{ type: core.Input }],
    fullscreen: [{ type: core.Input }],
    download: [{ type: core.Input }],
    color: [{ type: core.Input }],
    spinner: [{ type: core.Input }],
    poster: [{ type: core.Input }]
};
var MatVideoSourceDirective = /** @class */ (function () {
    function MatVideoSourceDirective(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.type = null;
        this.init = true;
        this.video = matVideoComponent;
        this.source = el.nativeElement;
        this.init = false;
    }
    MatVideoSourceDirective.prototype.ngOnChanges = function (changes) {
        this.source.src = this.src;
        this.source.type = this.type;
        if (!this.init)
            this.video.load();
    };
    return MatVideoSourceDirective;
}());
MatVideoSourceDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[matVideoSource]'
            },] },
];
MatVideoSourceDirective.ctorParameters = function () { return [
    { type: MatVideoComponent, decorators: [{ type: core.Host }] },
    { type: core.ElementRef }
]; };
MatVideoSourceDirective.propDecorators = {
    src: [{ type: core.Input }],
    type: [{ type: core.Input }]
};
var MatVideoTrackDirective = /** @class */ (function () {
    function MatVideoTrackDirective(matVideoComponent, el) {
        this.matVideoComponent = matVideoComponent;
        this.el = el;
        this.src = null;
        this.kind = null;
        this.srclang = null;
        this.label = null;
        this.init = true;
        this.video = matVideoComponent;
        this.track = el.nativeElement;
        this.init = false;
    }
    MatVideoTrackDirective.prototype.ngOnChanges = function (changes) {
        this.track.src = this.src;
        this.track.kind = this.kind;
        this.track.srclang = this.srclang;
        this.track.label = this.label;
        if (!this.init)
            this.video.load();
    };
    return MatVideoTrackDirective;
}());
MatVideoTrackDirective.decorators = [
    { type: core.Directive, args: [{
                selector: '[matVideoTrack]'
            },] },
];
MatVideoTrackDirective.ctorParameters = function () { return [
    { type: MatVideoComponent, decorators: [{ type: core.Host }] },
    { type: core.ElementRef }
]; };
MatVideoTrackDirective.propDecorators = {
    src: [{ type: core.Input }],
    kind: [{ type: core.Input }],
    srclang: [{ type: core.Input }],
    label: [{ type: core.Input }]
};
var sliderprogressbarId = 0;
var MatSliderProgressBarComponent = /** @class */ (function (_super) {
    __extends(MatSliderProgressBarComponent, _super);
    function MatSliderProgressBarComponent(elementRef, focusMonitor, changeDetectorRef, dir, tabIndex) {
        var _this = _super.call(this, elementRef, focusMonitor, changeDetectorRef, dir, tabIndex) || this;
        _this.mode = 'buffer';
        _this.value = 0;
        _this._bufferValue = 0;
        _this.sliderprogressbarId = "mat-slider-progress-bar-" + sliderprogressbarId++;
        _this.tabIndex = parseInt(tabIndex) || 0;
        return _this;
    }
    Object.defineProperty(MatSliderProgressBarComponent.prototype, "bufferValue", {
        get: function () { return this._bufferValue; },
        set: function (v) { this._bufferValue = clamp(v || 0); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MatSliderProgressBarComponent.prototype, "_trackBufferStyles", {
        get: function () {
            if (this.mode === 'buffer') {
                var axis = this.vertical ? 'Y' : 'X';
                return {
                    'transform': "translate" + axis + "(0px) scale" + axis + "(" + this._bufferValue / 100 + ")"
                };
            }
        },
        enumerable: true,
        configurable: true
    });
    return MatSliderProgressBarComponent;
}(material.MatSlider));
MatSliderProgressBarComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-slider-progress-bar',
                template: "<div class=\"mat-slider-wrapper\" #sliderWrapper>\n    <div class=\"mat-slider-track-wrapper\">\n        <svg width=\"100%\" height=\"2\" focusable=\"false\" class=\"mat-slider-progress-background\">\n            <defs>\n                <pattern [id]=\"sliderprogressbarId\" x=\"2.5\" y=\"0\" width=\"5\" height=\"2.5\" patternUnits=\"userSpaceOnUse\">\n                    <circle cx=\"1.25\" cy=\"1.25\" r=\"1.25\" />\n                </pattern>\n            </defs>\n            <rect [attr.fill]=\"'url(#' + sliderprogressbarId + ')'\" width=\"100%\" height=\"100%\" />\n        </svg>\n        <div class=\"mat-slider-track-fill mat-slider-track-buffer\" [ngStyle]=\"_trackBufferStyles\"></div>\n        <div class=\"mat-slider-track-fill\" [ngStyle]=\"_trackFillStyles\"></div>\n    </div>\n    <div class=\"mat-slider-ticks-container\" [ngStyle]=\"_ticksContainerStyles\">\n        <div class=\"mat-slider-ticks\" [ngStyle]=\"_ticksStyles\"></div>\n    </div>\n    <div class=\"mat-slider-thumb-container\" [ngStyle]=\"_thumbContainerStyles\">\n        <div class=\"mat-slider-focus-ring\"></div>\n        <div class=\"mat-slider-thumb\"></div>\n        <div class=\"mat-slider-thumb-label\">\n            <span class=\"mat-slider-thumb-label-text\">{{displayValue}}</span>\n        </div>\n    </div>\n</div>",
                styles: [":host{width:100%}.mat-slider-progress-background{position:absolute;height:2px;width:100%;fill:#d3d3d3}.mat-slider-track-buffer{background-color:#d3d3d3!important}.mat-slider-thumb{border-color:transparent!important;visibility:hidden;opacity:0;-webkit-transition:visibility 0s .2s,opacity .2s linear;transition:visibility 0s .2s,opacity .2s linear}:host:hover .mat-slider-thumb{visibility:visible;opacity:1;-webkit-transition:opacity .2s linear;transition:opacity .2s linear}"],
                providers: [material.MAT_SLIDER_VALUE_ACCESSOR],
                host: {
                    '(focus)': '_onFocus()',
                    '(blur)': '_onBlur()',
                    '(click)': '_onClick($event)',
                    '(keydown)': '_onKeydown($event)',
                    '(keyup)': '_onKeyup()',
                    '(mouseenter)': '_onMouseenter()',
                    '(slide)': '_onSlide($event)',
                    '(slideend)': '_onSlideEnd()',
                    '(slidestart)': '_onSlideStart($event)',
                    'class': 'mat-slider',
                    'role': 'slider',
                    '[tabIndex]': 'tabIndex',
                    '[attr.aria-disabled]': 'disabled',
                    '[attr.aria-valuemax]': 'max',
                    '[attr.aria-valuemin]': 'min',
                    '[attr.aria-valuenow]': 'value',
                    '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                    '[class.mat-slider-disabled]': 'disabled',
                    '[class.mat-slider-has-ticks]': 'tickInterval',
                    '[class.mat-slider-horizontal]': '!vertical',
                    '[class.mat-slider-axis-inverted]': '_invertAxis',
                    '[class.mat-slider-sliding]': '_isSliding',
                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',
                    '[class.mat-slider-vertical]': 'vertical',
                    '[class.mat-slider-min-value]': '_isMinValue',
                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',
                },
                inputs: ['disabled', 'color', 'tabIndex'],
                changeDetection: core.ChangeDetectionStrategy.OnPush,
            },] },
];
MatSliderProgressBarComponent.ctorParameters = function () { return [
    { type: core.ElementRef },
    { type: a11y.FocusMonitor },
    { type: core.ChangeDetectorRef },
    { type: bidi.Directionality, decorators: [{ type: core.Optional }] },
    { type: String, decorators: [{ type: core.Attribute, args: ['tabindex',] }] }
]; };
MatSliderProgressBarComponent.propDecorators = {
    mode: [{ type: core.Input }],
    value: [{ type: core.Input }],
    bufferValue: [{ type: core.Input }]
};
function clamp(v, min, max) {
    if (min === void 0) { min = 0; }
    if (max === void 0) { max = 100; }
    return Math.max(min, Math.min(max, v));
}
var SecondsToTimePipe = /** @class */ (function () {
    function SecondsToTimePipe() {
        this.times = {
            year: 31557600,
            month: 2629746,
            day: 86400,
            hour: 3600,
        };
    }
    SecondsToTimePipe.prototype.transform = function (seconds) {
        if (!seconds)
            return '0:00';
        else {
            var time_string = '';
            for (var key in this.times) {
                if (Math.floor(seconds / this.times[key]) > 0) {
                    time_string += Math.floor(seconds / this.times[key]).toString() + ':';
                    seconds = seconds - this.times[key] * Math.floor(seconds / this.times[key]);
                }
            }
            time_string += Math.floor(seconds / 60).toString() + ':';
            seconds = seconds - 60 * Math.floor(seconds / 60);
            if (Math.floor(seconds) < 10)
                time_string += '0';
            time_string += Math.floor(seconds).toString();
            return time_string;
        }
    };
    return SecondsToTimePipe;
}());
SecondsToTimePipe.decorators = [
    { type: core.Pipe, args: [{
                name: 'secondsToTime'
            },] },
];
var FullscreenService = /** @class */ (function () {
    function FullscreenService() {
        this.fnMap = [
            [
                'requestFullscreen',
                'exitFullscreen',
                'fullscreenElement',
                'fullscreenEnabled',
                'fullscreenchange',
                'fullscreenerror'
            ],
            [
                'webkitRequestFullscreen',
                'webkitExitFullscreen',
                'webkitFullscreenElement',
                'webkitFullscreenEnabled',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            [
                'webkitRequestFullScreen',
                'webkitCancelFullScreen',
                'webkitCurrentFullScreenElement',
                'webkitCancelFullScreen',
                'webkitfullscreenchange',
                'webkitfullscreenerror'
            ],
            [
                'mozRequestFullScreen',
                'mozCancelFullScreen',
                'mozFullScreenElement',
                'mozFullScreenEnabled',
                'mozfullscreenchange',
                'mozfullscreenerror'
            ],
            [
                'msRequestFullscreen',
                'msExitFullscreen',
                'msFullscreenElement',
                'msFullscreenEnabled',
                'MSFullscreenChange',
                'MSFullscreenError'
            ]
        ];
        this.keyboardAllowed = typeof Element !== 'undefined' && 'ALLOW_KEYBOARD_INPUT' in Element;
        var ret = {};
        var val;
        for (var i = 0; i < this.fnMap.length; i++) {
            val = this.fnMap[i];
            if (val && val[1] in document) {
                for (i = 0; i < val.length; i++) {
                    ret[this.fnMap[0][i].toString()] = val[i];
                }
                this.fn = ret;
            }
        }
    }
    FullscreenService.prototype.request = function (elem) {
        var request = this.fn.requestFullscreen;
        elem = elem || document.documentElement;
        if (/5\.1[.\d]* Safari/.test(navigator.userAgent)) {
            elem[request]();
        }
        else {
            elem[request](this.keyboardAllowed && ((Element)).ALLOW_KEYBOARD_INPUT);
        }
    };
    FullscreenService.prototype.exit = function () {
        document[this.fn.exitFullscreen]();
    };
    FullscreenService.prototype.toggle = function (elem) {
        if (this.isFullscreen()) {
            this.exit();
        }
        else {
            this.request(elem);
        }
    };
    FullscreenService.prototype.onChange = function (callback) {
        document.addEventListener(this.fn.fullscreenchange, callback, false);
    };
    FullscreenService.prototype.onError = function (callback) {
        document.addEventListener(this.fn.fullscreenerror, callback, false);
    };
    FullscreenService.prototype.isFullscreen = function () {
        return Boolean(document[this.fn.fullscreenElement]);
    };
    FullscreenService.prototype.isEnabled = function () {
        return Boolean(document[this.fn.fullscreenEnabled]);
    };
    FullscreenService.prototype.getElement = function () {
        return document[this.fn.fullscreenElement];
    };
    return FullscreenService;
}());
FullscreenService.decorators = [
    { type: core.Injectable },
];
FullscreenService.ctorParameters = function () { return []; };
var MatDownloadButtonComponent = /** @class */ (function () {
    function MatDownloadButtonComponent() {
    }
    return MatDownloadButtonComponent;
}());
MatDownloadButtonComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-download-button',
                template: "<a mat-icon-button [href]=\"video?.currentSrc\" [download]=\"title\">\n  <mat-icon>file_download</mat-icon>\n</a>",
                styles: ["a{color:inherit;text-decoration:none}"]
            },] },
];
MatDownloadButtonComponent.ctorParameters = function () { return []; };
MatDownloadButtonComponent.propDecorators = {
    video: [{ type: core.Input }],
    title: [{ type: core.Input }]
};
var MatFullscreenButtonComponent = /** @class */ (function () {
    function MatFullscreenButtonComponent(fscreen, evt) {
        this.fscreen = fscreen;
        this.evt = evt;
        this.canFullscreen = false;
        this.fullscreen = false;
        this.fullscreenChanged = new core.EventEmitter();
    }
    MatFullscreenButtonComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (this.fscreen.isEnabled())
            this.canFullscreen = true;
        this.fscreen.onChange(function (event) { return _this.fscreen.isFullscreen() ? _this.onChangesFullscreen(true) : _this.onChangesFullscreen(false); });
    };
    MatFullscreenButtonComponent.prototype.setFullscreen = function (value) {
        if (this.canFullscreen && this.fullscreen !== value)
            this.toggleFullscreen();
    };
    MatFullscreenButtonComponent.prototype.toggleFullscreen = function () {
        this.fullscreen = !this.fullscreen;
        this.updateFullscreen();
    };
    MatFullscreenButtonComponent.prototype.updateFullscreen = function () {
        this.fullscreen ? this.fscreen.request(this.player) : this.fscreen.exit();
        this.fullscreenChanged.emit(this.fullscreen);
    };
    MatFullscreenButtonComponent.prototype.onChangesFullscreen = function (value) {
        this.fullscreen = value;
        this.fullscreenChanged.emit(this.fullscreen);
    };
    MatFullscreenButtonComponent.prototype.onFullscreenKey = function (event) {
        this.toggleFullscreen();
        event.preventDefault();
    };
    return MatFullscreenButtonComponent;
}());
MatFullscreenButtonComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-fullscreen-button',
                template: "<button mat-icon-button [disabled]=\"!canFullscreen\" (click)=\"toggleFullscreen()\">\n  <mat-icon *ngIf=\"!fullscreen\">fullscreen</mat-icon>\n  <mat-icon *ngIf=\"fullscreen\">fullscreen_exit</mat-icon>\n</button>",
                styles: [""]
            },] },
];
MatFullscreenButtonComponent.ctorParameters = function () { return [
    { type: FullscreenService },
    { type: EventService }
]; };
MatFullscreenButtonComponent.propDecorators = {
    player: [{ type: core.Input }],
    fullscreen: [{ type: core.Input }],
    fullscreenChanged: [{ type: core.Output }],
    onFullscreenKey: [{ type: core.HostListener, args: ['document:keyup.f', ['$event'],] }]
};
var MatPlayButtonComponent = /** @class */ (function () {
    function MatPlayButtonComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.play = false;
        this.playChanged = new core.EventEmitter();
    }
    MatPlayButtonComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.events = [
            { element: this.video, name: 'play', callback: function (event) { return _this.setVideoPlayback(true); }, dispose: null },
            { element: this.video, name: 'pause', callback: function (event) { return _this.setVideoPlayback(false); }, dispose: null },
            { element: this.video, name: 'durationchange', callback: function (event) { return _this.setVideoPlayback(false); }, dispose: null },
            { element: this.video, name: 'ended', callback: function (event) { return _this.setVideoPlayback(false); }, dispose: null },
            { element: this.video, name: 'click', callback: function (event) { return _this.toggleVideoPlayback(); }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    MatPlayButtonComponent.prototype.ngOnDestroy = function () {
        this.evt.removeEvents(this.events);
    };
    MatPlayButtonComponent.prototype.setVideoPlayback = function (value) {
        if (this.play !== value)
            this.toggleVideoPlayback();
    };
    MatPlayButtonComponent.prototype.toggleVideoPlayback = function () {
        this.play = !this.play;
        this.updateVideoPlayback();
    };
    MatPlayButtonComponent.prototype.updateVideoPlayback = function () {
        this.play ? this.video.play() : this.video.pause();
        this.playChanged.emit(this.play);
    };
    MatPlayButtonComponent.prototype.onPlayKey = function (event) {
        this.toggleVideoPlayback();
        event.preventDefault();
    };
    return MatPlayButtonComponent;
}());
MatPlayButtonComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-play-button',
                template: "<button mat-icon-button (click)=\"toggleVideoPlayback()\">\n  <mat-icon *ngIf=\"!play\">play_arrow</mat-icon>\n  <mat-icon *ngIf=\"play\">pause</mat-icon>\n</button>",
                styles: [""]
            },] },
];
MatPlayButtonComponent.ctorParameters = function () { return [
    { type: core.Renderer2 },
    { type: EventService }
]; };
MatPlayButtonComponent.propDecorators = {
    video: [{ type: core.Input }],
    play: [{ type: core.Input }],
    playChanged: [{ type: core.Output }],
    onPlayKey: [{ type: core.HostListener, args: ['document:keyup.space', ['$event'],] }]
};
var MatQualityControlComponent = /** @class */ (function () {
    function MatQualityControlComponent() {
    }
    return MatQualityControlComponent;
}());
MatQualityControlComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-quality-control',
                template: "<div class=\"quality\">\n  {{ video?.videoHeight }}p\n</div>",
                styles: [".quality{display:inline-block;font-size:12px;padding-left:12px;padding-right:12px}"]
            },] },
];
MatQualityControlComponent.ctorParameters = function () { return []; };
MatQualityControlComponent.propDecorators = {
    video: [{ type: core.Input }]
};
var MatSeekProgressControlComponent = /** @class */ (function () {
    function MatSeekProgressControlComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.curTimePercent = 0;
        this.bufTimePercent = 0;
        this.video = null;
        this.color = 'primary';
        this.currentTime = 0;
        this.currentTimeChanged = new core.EventEmitter();
        this.bufferedTime = 0;
        this.bufferedTimeChanged = new core.EventEmitter();
    }
    MatSeekProgressControlComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.events = [
            { element: this.video, name: 'seeking', callback: function (event) { return _this.updateCurrentTime(_this.video.currentTime); }, dispose: null },
            { element: this.video, name: 'canplaythrough', callback: function (event) { return _this.updateBufferedTime(); }, dispose: null },
            { element: this.video, name: 'timeupdate', callback: function (event) { return _this.updateCurrentTime(_this.video.currentTime); }, dispose: null },
            { element: this.video, name: 'progress', callback: function (event) { return _this.updateBufferedTime(); }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    MatSeekProgressControlComponent.prototype.ngOnDestroy = function () {
        this.evt.removeEvents(this.events);
    };
    MatSeekProgressControlComponent.prototype.seekVideo = function (value) {
        var percentage = value / 100;
        var newTime = this.video.duration * percentage;
        this.video.currentTime = newTime;
    };
    MatSeekProgressControlComponent.prototype.updateCurrentTime = function (time) {
        this.currentTime = time;
        this.curTimePercent = this.updateTime(this.currentTimeChanged, this.currentTime);
    };
    MatSeekProgressControlComponent.prototype.updateBufferedTime = function () {
        if (this.video.buffered.length > 0) {
            var largestBufferValue = 0;
            for (var i = 0; i < this.video.buffered.length; i++) {
                var cur = this.video.currentTime;
                var start = this.video.buffered.start(i);
                var end = this.video.buffered.end(i);
                if (start <= cur && end > cur && (end - start) > largestBufferValue)
                    largestBufferValue = end;
            }
            this.bufferedTime = largestBufferValue;
            this.bufTimePercent = this.updateTime(this.bufferedTimeChanged, this.bufferedTime);
        }
    };
    MatSeekProgressControlComponent.prototype.updateTime = function (emitter, time) {
        emitter.emit(time);
        return time / this.video.duration * 100;
    };
    return MatSeekProgressControlComponent;
}());
MatSeekProgressControlComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-seek-progress-control',
                template: "<mat-slider-progress-bar [color]=\"color\" mode=\"buffer\" step=\"0.01\" [value]=\"curTimePercent\" [bufferValue]=\"bufTimePercent\"\n  (input)=\"seekVideo($event.value)\"></mat-slider-progress-bar>",
                styles: [""]
            },] },
];
MatSeekProgressControlComponent.ctorParameters = function () { return [
    { type: core.Renderer2 },
    { type: EventService }
]; };
MatSeekProgressControlComponent.propDecorators = {
    video: [{ type: core.Input }],
    color: [{ type: core.Input }],
    currentTime: [{ type: core.Input }],
    currentTimeChanged: [{ type: core.Output }],
    bufferedTime: [{ type: core.Input }],
    bufferedTimeChanged: [{ type: core.Output }]
};
var MatTimeControlComponent = /** @class */ (function () {
    function MatTimeControlComponent() {
    }
    return MatTimeControlComponent;
}());
MatTimeControlComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-time-control',
                template: "<div class=\"playtime\">\n  {{ video?.currentTime | secondsToTime }} / {{ video?.duration | secondsToTime}}\n</div>",
                styles: [".playtime{display:inline;font-size:12px}"]
            },] },
];
MatTimeControlComponent.ctorParameters = function () { return []; };
MatTimeControlComponent.propDecorators = {
    video: [{ type: core.Input }]
};
var MatVideoSpinnerComponent = /** @class */ (function () {
    function MatVideoSpinnerComponent(renderer, evt) {
        this.renderer = renderer;
        this.evt = evt;
        this.spinner = 'spin';
        this.videoBuffering = false;
        this.videoLoaded = false;
        this.events = [];
    }
    MatVideoSpinnerComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.events = [
            { element: this.video, name: 'loadstart', callback: function (event) { return _this.videoLoaded = false; }, dispose: null },
            { element: this.video, name: 'loadedmetadata', callback: function (event) { return _this.videoLoaded = true; }, dispose: null },
            { element: this.video, name: 'canplay', callback: function (event) { return _this.videoBuffering = false; }, dispose: null },
            { element: this.video, name: 'waiting', callback: function (event) { return _this.videoBuffering = true; }, dispose: null },
            { element: this.video, name: 'durationchange', callback: function (event) { return _this.videoBuffering = true; }, dispose: null }
        ];
        this.evt.addEvents(this.renderer, this.events);
    };
    MatVideoSpinnerComponent.prototype.ngOnDestroy = function () {
        this.evt.removeEvents(this.events);
    };
    return MatVideoSpinnerComponent;
}());
MatVideoSpinnerComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-video-spinner',
                template: "<div *ngIf=\"!videoLoaded || videoBuffering\" [class]=\"spinner\"></div>",
                styles: [":host{position:absolute;left:calc(50% - 32px);top:calc(50% - 32px);z-index:1}", ".spin{-webkit-box-sizing:border-box;box-sizing:border-box;width:64px;height:64px;border-radius:100%;border:10px solid rgba(255,255,255,.2);border-top-color:#fff;-webkit-animation:1s linear infinite spin;animation:1s linear infinite spin}@-webkit-keyframes spin{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes spin{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}", ".dot{width:64px;height:64px;background-color:#fff;border-radius:100%;-webkit-animation:1s ease-in-out infinite dot;animation:1s ease-in-out infinite dot}@-webkit-keyframes dot{0%{-webkit-transform:scale(0)}100%{-webkit-transform:scale(1);opacity:0}}@keyframes dot{0%{-webkit-transform:scale(0);transform:scale(0)}100%{-webkit-transform:scale(1);transform:scale(1);opacity:0}}", ".split-ring{display:inline-block;width:64px;height:64px}.split-ring:after{content:\" \";display:block;width:46px;height:46px;margin:1px;border-radius:50%;border:5px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s linear infinite split-ring;animation:1.2s linear infinite split-ring}@-webkit-keyframes split-ring{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(360deg)}}@keyframes split-ring{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}", ".hourglass{display:inline-block;position:relative;width:64px;height:64px}.hourglass:after{content:\" \";display:block;border-radius:50%;width:0;height:0;margin:6px;-webkit-box-sizing:border-box;box-sizing:border-box;border:26px solid #fff;border-color:#fff transparent;-webkit-animation:1.2s infinite hourglass;animation:1.2s infinite hourglass}@-webkit-keyframes hourglass{0%{-webkit-transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{-webkit-transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{-webkit-transform:rotate(720deg)}}@keyframes hourglass{0%{-webkit-transform:rotate(0);transform:rotate(0);-webkit-animation-timing-function:cubic-bezier(.55,.055,.675,.19);animation-timing-function:cubic-bezier(.55,.055,.675,.19)}50%{-webkit-transform:rotate(360deg);transform:rotate(360deg);-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}100%{-webkit-transform:rotate(720deg);transform:rotate(720deg)}}"]
            },] },
];
MatVideoSpinnerComponent.ctorParameters = function () { return [
    { type: core.Renderer2 },
    { type: EventService }
]; };
MatVideoSpinnerComponent.propDecorators = {
    video: [{ type: core.Input }],
    spinner: [{ type: core.Input }]
};
var MatVolumeControlComponent = /** @class */ (function () {
    function MatVolumeControlComponent(evt) {
        this.evt = evt;
        this.video = null;
        this.color = 'primary';
        this.volume = 1;
        this.volumeChanged = new core.EventEmitter();
        this.muted = false;
        this.mutedChanged = new core.EventEmitter();
    }
    MatVolumeControlComponent.prototype.setVolume = function (value) {
        this.volume = value;
        this.video.volume = this.volume;
        this.volumeChanged.emit(this.volume);
        if (this.volume > 0)
            this.setMuted(false);
    };
    MatVolumeControlComponent.prototype.setMuted = function (value) {
        if (this.muted !== value)
            this.toggleMuted();
    };
    MatVolumeControlComponent.prototype.toggleMuted = function () {
        this.muted = !this.muted;
        this.updateMuted();
    };
    MatVolumeControlComponent.prototype.updateMuted = function () {
        this.video.muted = this.muted;
        this.mutedChanged.emit(this.muted);
    };
    MatVolumeControlComponent.prototype.onMuteKey = function (event) {
        this.toggleMuted();
        event.preventDefault();
    };
    return MatVolumeControlComponent;
}());
MatVolumeControlComponent.decorators = [
    { type: core.Component, args: [{
                selector: 'mat-volume-control',
                template: "<div class=\"volume-control\">\n  <button mat-icon-button (click)=\"toggleMuted()\">\n    <mat-icon *ngIf=\"muted || volume === 0\">volume_off</mat-icon>\n    <mat-icon *ngIf=\"!muted && volume > 0 && volume < 0.25\">volume_mute</mat-icon>\n    <mat-icon *ngIf=\"!muted && volume >= 0.25 && volume < 0.5\">volume_down</mat-icon>\n    <mat-icon *ngIf=\"!muted && volume >= 0.5\">volume_up</mat-icon>\n  </button>\n  <mat-slider class=\"volume-slider\" [color]=\"color\" min=\"0\" max=\"1\" step=\"0.01\" value=\"1\" (input)=\"setVolume($event.value)\">\n  </mat-slider>\n</div>",
                styles: [".volume-control{display:inline}.volume-slider{margin-left:-15px}::ng-deep.mat-slider-thumb{border-color:transparent!important}::ng-deep.mat-slider-track-background{background-color:#d3d3d3!important;-webkit-transform:translateX(0)!important;transform:translateX(0)!important}.volume-control .volume-slider{visibility:hidden;opacity:0;min-width:0;width:0;-webkit-transition:visibility 0s .2s,opacity .2s linear,width .2s linear;transition:visibility 0s .2s,opacity .2s linear,width .2s linear}.volume-control:hover .volume-slider{visibility:visible;opacity:1;min-width:90px;width:90px;-webkit-transition:opacity .2s linear,width .2s linear,min-width .2s linear;transition:opacity .2s linear,width .2s linear,min-width .2s linear}"]
            },] },
];
MatVolumeControlComponent.ctorParameters = function () { return [
    { type: EventService }
]; };
MatVolumeControlComponent.propDecorators = {
    video: [{ type: core.Input }],
    color: [{ type: core.Input }],
    volume: [{ type: core.Input }],
    volumeChanged: [{ type: core.Output }],
    muted: [{ type: core.Input }],
    mutedChanged: [{ type: core.Output }],
    onMuteKey: [{ type: core.HostListener, args: ['document:keyup.m', ['$event'],] }]
};
var MatVideoModule = /** @class */ (function () {
    function MatVideoModule() {
    }
    return MatVideoModule;
}());
MatVideoModule.decorators = [
    { type: core.NgModule, args: [{
                declarations: [
                    SecondsToTimePipe,
                    MatVideoComponent,
                    MatSliderProgressBarComponent,
                    MatPlayButtonComponent,
                    MatVolumeControlComponent,
                    MatDownloadButtonComponent,
                    MatFullscreenButtonComponent,
                    MatTimeControlComponent,
                    MatQualityControlComponent,
                    MatVideoSpinnerComponent,
                    MatSeekProgressControlComponent,
                    MatVideoSourceDirective,
                    MatVideoTrackDirective
                ],
                imports: [
                    common.CommonModule,
                    material.MatIconModule,
                    material.MatButtonModule,
                    material.MatSliderModule
                ],
                exports: [
                    MatVideoComponent,
                    MatVideoSourceDirective,
                    MatVideoTrackDirective
                ],
                providers: [
                    FullscreenService,
                    EventService
                ]
            },] },
];

exports.MatVideoModule = MatVideoModule;
exports.ɵn = MatVideoSourceDirective;
exports.ɵo = MatVideoTrackDirective;
exports.ɵd = MatSliderProgressBarComponent;
exports.ɵa = SecondsToTimePipe;
exports.ɵc = EventService;
exports.ɵi = FullscreenService;
exports.ɵg = MatDownloadButtonComponent;
exports.ɵh = MatFullscreenButtonComponent;
exports.ɵe = MatPlayButtonComponent;
exports.ɵk = MatQualityControlComponent;
exports.ɵm = MatSeekProgressControlComponent;
exports.ɵj = MatTimeControlComponent;
exports.ɵl = MatVideoSpinnerComponent;
exports.ɵf = MatVolumeControlComponent;
exports.ɵb = MatVideoComponent;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=mat-video.umd.js.map
