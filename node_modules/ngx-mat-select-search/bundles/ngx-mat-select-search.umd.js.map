{
  "version": 3,
  "file": "ngx-mat-select-search.umd.js",
  "sources": [
    "ng://ngx-mat-select-search/out/ngx-mat-select-search.module.ts",
    "ng://ngx-mat-select-search/out/mat-select-search.component.ts",
    "ng://ngx-mat-select-search/out/mat-select-search-clear.directive.ts"
  ],
  "sourcesContent": [
    "/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport { MatButtonModule, MatInputModule, MatIconModule } from '@angular/material';\nimport { CommonModule } from '@angular/common';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n",
    "/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy, ChangeDetectorRef,\n  Component, ElementRef, EventEmitter, forwardRef, Inject, Input, OnDestroy, OnInit, QueryList,\n  ViewChild,\n  ContentChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatOption, MatSelect } from '@angular/material';\nimport { Subject } from 'rxjs';\nimport {delay, take, takeUntil} from 'rxjs/operators';\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  template: `<!-- Placeholder to adjust vertical offset of the mat-option elements -->\n<input matInput class=\"mat-select-search-input mat-select-search-hidden\"/>\n\n<!-- Note: the  mat-datepicker-content mat-tab-header are needed to inherit the material theme colors, see PR #22 -->\n<div\n      #innerSelectSearch\n      class=\"mat-select-search-inner mat-typography mat-datepicker-content mat-tab-header\"\n      [ngClass]=\"{'mat-select-search-inner-multiple': matSelect.multiple}\">\n  <input matInput\n         class=\"mat-select-search-input\"\n         autocomplete=\"off\"\n         #searchSelectInput\n         (keydown)=\"_handleKeydown($event)\"\n         (input)=\"onInputChange($event.target.value)\"\n         (blur)=\"onBlur($event.target.value)\"\n         [placeholder]=\"placeholderLabel\"\n  />\n  <button mat-button *ngIf=\"value\"\n          mat-icon-button\n          aria-label=\"Clear\"\n          (click)=\"_reset(true)\"\n          class=\"mat-select-search-clear\">\n    <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[ngxMatSelectSearchClear]\"></ng-content>\n    <ng-template #defaultIcon>\n      <mat-icon>close</mat-icon>\n    </ng-template>\n  </button>\n</div>\n\n<div *ngIf=\"noEntriesFoundLabel && value && _options?.length === 0\"\n     class=\"mat-select-search-no-entries-found\">\n  {{noEntriesFoundLabel}}\n</div>\n<!--\nCopyright (c) 2018 Bithost GmbH All Rights Reserved.\n\nUse of this source code is governed by an MIT-style license that can be\nfound in the LICENSE file at https://angular.io/license\n-->\n`,\n  styles: [`.mat-select-search-hidden{visibility:hidden}.mat-select-search-inner{position:absolute;top:0;width:100%;border-bottom-width:1px;border-bottom-style:solid;z-index:100;font-size:inherit;-webkit-box-shadow:none;box-shadow:none;border-radius:0}.mat-select-search-inner.mat-select-search-inner-multiple{width:100%}/deep/ .mat-select-search-panel{-webkit-transform:none!important;transform:none!important;overflow-x:hidden}.mat-select-search-input{padding:16px 36px 16px 16px;-webkit-box-sizing:border-box;box-sizing:border-box}.mat-select-search-no-entries-found{padding:16px}.mat-select-search-clear{position:absolute;right:4px;top:5px}/deep/ .cdk-overlay-pane-select-search{margin-top:-50px}`],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, AfterViewInit, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', {read: ElementRef}) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', {read: ElementRef}) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective) clearIcon: MatSelectSearchClearDirective;\n\n  /** Current search value */\n  get value(): string {\n    return this._value;\n  }\n  private _value: string;\n\n  onChange: Function = (_: any) => {};\n  onTouched: Function = (_: any) => {};\n\n  /** Reference to the MatSelect options */\n  public _options: QueryList<MatOption>;\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  /** Whether the backdrop class has been set */\n  private overlayClassSet = false;\n\n  /** Event that emits when the current value changes */\n  private change = new EventEmitter<string>();\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n              private changeDetectorRef: ChangeDetectorRef) {\n\n\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        this.matSelect.panelClass.push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          // focus the search field when opening\n          this.getWidth();\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this._options = this.matSelect.options;\n        this._options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            const keyManager = this.matSelect._keyManager;\n            if (keyManager && this.matSelect.panelOpen) {\n              // avoid \"expression has been changed\" error\n              setTimeout(() => {\n                keyManager.setFirstItemActive();\n                this.getWidth();\n              }, 1);\n            }\n          });\n      });\n\n    // detect changes when the input changes\n    this.change\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        this.changeDetectorRef.detectChanges();\n      });\n\n    this.initMultipleHandling();\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  ngAfterViewInit() {\n    this.setOverlayClass();\n\n    // update view when available options change\n    this.matSelect.openedChange\n      .pipe(\n        take(1),\n        takeUntil(this._onDestroy)\n      ).subscribe(() => {\n        this.matSelect.options.changes\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => {\n            this.changeDetectorRef.markForCheck();\n          });\n      });\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    if (event.keyCode === 32) {\n      // do not propagate spaces to MatSelect, as this would select the currently active option\n      event.stopPropagation();\n    }\n\n  }\n\n\n  writeValue(value: string) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this._value = value;\n      this.change.emit(value);\n    }\n  }\n\n  onInputChange(value) {\n    const valueChanged = value !== this._value;\n    if (valueChanged) {\n      this.initMultiSelectedValues();\n      this._value = value;\n      this.onChange(value);\n      this.change.emit(value);\n    }\n  }\n\n  onBlur(value: string) {\n    this.writeValue(value);\n    this.onTouched();\n  }\n\n  registerOnChange(fn: Function) {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    if (!this.searchSelectInput) {\n      return;\n    }\n    this.searchSelectInput.nativeElement.value = '';\n    this.onInputChange('');\n    if (focus) {\n      this._focus();\n    }\n  }\n\n  /**\n   * Sets the overlay class  to correct offsetY\n   * so that the selected option is at the position of the select box when opening\n   */\n  private setOverlayClass() {\n    if (this.overlayClassSet) {\n      return;\n    }\n    const overlayClass = 'cdk-overlay-pane-select-search';\n\n    this.matSelect.overlayDir.attach\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        // note: this is hacky, but currently there is no better way to do this\n        let element: HTMLElement = this.searchSelectInput.nativeElement;\n        let overlayElement: HTMLElement;\n        while (element = element.parentElement) {\n          if (element.classList.contains('cdk-overlay-pane')) {\n            overlayElement = element;\n            break;\n          }\n        }\n        if (overlayElement) {\n          overlayElement.classList.add(overlayClass);\n        }\n      });\n\n    this.overlayClassSet = true;\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.matSelect.valueChange\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        if (this.matSelect.multiple) {\n          let restoreSelectedValues = false;\n          if (this._value && this._value.length\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (values.indexOf(previousValue) === -1 && optionValues.indexOf(previousValue) === -1) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n\n          if (restoreSelectedValues) {\n            this.matSelect._onChange(values);\n          }\n\n          this.previousSelectedValues = values;\n        }\n      });\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  private getWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  /**\n   *  Initialize this.previousSelectedValues once the first filtering occurs.\n   */\n  initMultiSelectedValues() {\n    if (this.matSelect.multiple && !this._value) {\n      this.previousSelectedValues = this.matSelect.options\n        .filter(option => option.selected)\n        .map(option => option.value);\n    }\n  }\n\n}\n",
    "import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n"
  ],
  "names": [
    "MatInputModule",
    "MatIconModule",
    "MatButtonModule",
    "CommonModule",
    "NgModule",
    "ContentChild",
    "ViewChild",
    "ElementRef",
    "Input",
    "ChangeDetectorRef",
    "MatSelect",
    "Inject",
    "ChangeDetectionStrategy",
    "forwardRef",
    "NG_VALUE_ACCESSOR",
    "Component",
    "takeUntil",
    "take",
    "delay",
    "Subject",
    "EventEmitter",
    "Directive"
  ],
  "mappings": "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"
}
